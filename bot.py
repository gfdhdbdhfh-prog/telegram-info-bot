import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os

# üîë –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –°–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–µ–∂–∏–º–∞–º
QUESTIONS = {
    "–û–±—ã—á–Ω—ã–π": [
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
    ],
    "–°—Ä–µ–¥–Ω–∏–π": [
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "–ì–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?",
        "–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?",
    ],
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π": [
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "–ì–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?",
        "–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?",
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è –º–µ—á—Ç–∞?",
        "–ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ç—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª?",
        "–ö–∞–∫ —Ç—ã –ª—é–±–∏—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    ]
}

# üß≠ –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_modes = {}
user_states = {}  # {user_id: {"mode": str, "q_index": int, "answers": []}}

def settings_keyboard():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"),
                KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º"),
                KeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"),
            ]
        ],
        resize_keyboard=True
    )
    return kb

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_modes[message.from_user.id] = "–û–±—ã—á–Ω—ã–π"
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∑–Ω–∞—ë—Ç –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ üòä\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /info, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /settings, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º.",
    )


# üîπ –ö–æ–º–∞–Ω–¥–∞ /settings
@dp.message(Command("settings"))
async def settings_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=settings_keyboard())


# üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
@dp.message(lambda m: m.text in ["–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"])
async def set_mode(message: types.Message):
    mode = message.text.replace(" —Ä–µ–∂–∏–º", "")
    user_modes[message.from_user.id] = mode
    await message.answer(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode}", reply_markup=ReplyKeyboardRemove())


# üîπ –ö–æ–º–∞–Ω–¥–∞ /info
@dp.message(Command("info"))
async def info_cmd(message: types.Message):
    user_id = message.from_user.id
    mode = user_modes.get(user_id, "–û–±—ã—á–Ω—ã–π")
    questions = QUESTIONS[mode]

    user_states[user_id] = {"mode": mode, "q_index": 0, "answers": []}

    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º: {mode}\n–ù–∞—á–Ω—ë–º –≤–æ–ø—Ä–æ—Å—ã!")
    await message.answer(questions[0])


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if user_id not in user_states:
        return

    state = user_states[user_id]
    mode = state["mode"]
    questions = QUESTIONS[mode]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    state["answers"].append(message.text)
    state["q_index"] += 1

    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
    if state["q_index"] < len(questions):
        next_q = questions[state["q_index"]]
        await message.answer(next_q)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        username = message.from_user.username or message.from_user.full_name
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        answers_text = [f"{q} ‚Äî {a}" for q, a in zip(questions, state["answers"])]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞
        file_content = f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} ({timestamp})\n\n" + "\n".join(answers_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"answers_{user_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(file_content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! ‚ù§Ô∏è –í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª:")
        await message.answer_document(types.FSInputFile(filename))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        os.remove(filename)
        del user_states[user_id]


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
